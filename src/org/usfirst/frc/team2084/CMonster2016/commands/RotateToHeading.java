/* 
 * Copyright (c) 2016 RobotsByTheC. All rights reserved.
 *
 * Open Source Software - may be modified and shared by FRC teams. The code must
 * be accompanied by the BSD license file in the root directory of the project.
 */
package org.usfirst.frc.team2084.CMonster2016.commands;

import java.util.function.DoubleSupplier;

import org.usfirst.frc.team2084.CMonster2016.Robot;
import org.usfirst.frc.team2084.CMonster2016.RobotMap;

/**
 *
 */
public class RotateToHeading extends ParameterCommand {

    private static final String HEADING_KEY = "Heading";

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double heading;
    private DoubleSupplier headingSupplier;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    public RotateToHeading(DoubleSupplier heading) {
        headingSupplier = heading;
        init();
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public RotateToHeading(double heading) {
        addNumberParameter(HEADING_KEY, heading);
        headingSupplier = () -> getNumberParameter(HEADING_KEY);

        init();

    }

    private void init() {
        requires(Robot.driveSubsystem);
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        heading = headingSupplier.getAsDouble();
        RobotMap.driveSubsystemArcadeDriveAlgorithm.rotateTo(heading);
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        RobotMap.driveSubsystemArcadeDriveAlgorithm.rotateTo(heading);
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;// RobotMap.driveSubsystemArcadeDriveAlgorithm.isHeadingOnTarget();
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
