/* 
 * Copyright (c) 2016 RobotsByTheC. All rights reserved.
 *
 * Open Source Software - may be modified and shared by FRC teams. The code must
 * be accompanied by the BSD license file in the root directory of the project.
 */
package org.usfirst.frc.team2084.CMonster2016.commands;

import org.usfirst.frc.team2084.CMonster2016.Robot;
import org.usfirst.frc.team2084.CMonster2016.RobotMap;
import org.usfirst.frc.team2084.CMonster2016.subsystems.ArmSubsystem;

import edu.wpi.first.wpilibj.command.Command;

/**
 *
 */
public class HomeArm extends Command {

    public static final double HOMING_SPEED = -0.6;
    public static final double MAX_TIME = 7;
    public static final double EXTRA_TIME = 0.4;

    private final ArmSubsystem armSubsystem = Robot.armSubsystem;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public HomeArm() {

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.armSubsystem);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        setTimeout(MAX_TIME);
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        // Turn off safety features and the brakes, very dangerous :)
        armSubsystem.setLimitsEnabled(false);
        armSubsystem.setBrakeEnabled(false);
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        armSubsystem.setSpeed(HOMING_SPEED);

    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return (RobotMap.armSubsystemLeftTalon.isRevLimitSwitchClosed()
                && RobotMap.armSubsystemRightTalon.isRevLimitSwitchClosed()) || isTimedOut();
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        interrupted();
        Robot.armSubsystem.resetAngle();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        Robot.armSubsystem.stop();
        armSubsystem.setBrakeEnabled(true);
        // armSubsystem.setLimitsEnabled(true);
    }
}
