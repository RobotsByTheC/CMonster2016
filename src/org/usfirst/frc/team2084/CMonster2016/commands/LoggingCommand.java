/* 
 * Copyright (c) 2015 RobotsByTheC. All rights reserved.
 *
 * Open Source Software - may be modified and shared by FRC teams. The code must
 * be accompanied by the BSD license file in the root directory of the project.
 */
package org.usfirst.frc.team2084.CMonster2016.commands;

import org.usfirst.frc.team2084.CMonster2016.Robot;
import org.usfirst.frc.team2084.CMonster2016.RobotMap;
import org.usfirst.frc.team2084.CMonster2016.vision.VisionResults;

import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * Command that is always running and reports debugging values.
 *
 * @author Ben Wolsieffer
 */
public class LoggingCommand extends Command {

    /**
     * The length of a match in seconds.
     */
    public static final double MATCH_LENGTH = 150;

    public LoggingCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        // Make sure this command still reports data when the
        // robot is disabled.
        setRunWhenDisabled(true);
    }

    /**
     * Does nothing.
     */
    @Override
    protected void initialize() {
    }

    /**
     * Prints out debugging data to the SmartDashboard.
     */
    @Override
    protected void execute() {
        // Report gyro values
        SmartDashboard.putNumber("Gyro Angle", RobotMap.driveSubsystemGyro.getAngle());

        SmartDashboard.putBoolean("Valid Vision Data", !VisionResults.isStale());

        // Report remaining match time
        double matchTime = Timer.getMatchTime();
        SmartDashboard.putNumber("Time Remaining", matchTime < 0 ? 0 : matchTime);

        // Report arm angle
        SmartDashboard.putNumber("Arm Angle", Math.toDegrees(Robot.armSubsystem.getAngle()));

        VisionResults.setCurrentHeading(RobotMap.driveSubsystemArcadeDriveAlgorithm.getHeading());
    }

    /**
     * This command never finishes.
     *
     * @return false
     */
    @Override
    protected boolean isFinished() {
        return false;
    }

    /**
     * Does nothing.
     */
    @Override
    protected void end() {
    }

    /**
     * Does nothing.
     */
    @Override
    protected void interrupted() {
    }
}
