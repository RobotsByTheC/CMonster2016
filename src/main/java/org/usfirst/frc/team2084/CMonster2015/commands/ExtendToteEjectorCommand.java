/* 
 * Copyright (c) 2015 RobotsByTheC. All rights reserved.
 *
 * Open Source Software - may be modified and shared by FRC teams. The code must
 * be accompanied by the BSD license file in the root directory of the project.
 */
package org.usfirst.frc.team2084.CMonster2015.commands;

import org.usfirst.frc.team2084.CMonster2015.Robot;
import org.usfirst.frc.team2084.CMonster2015.drive.processors.LinearRamper;
import org.usfirst.frc.team2084.CMonster2015.subsystems.ToteLifterSubsystem.EjectorState;
import org.usfirst.frc.team2084.CMonster2015.subsystems.ToteLifterSubsystem.GateState;

import edu.wpi.first.wpilibj.command.Command;

/**
 * Extends the tote ejector while the command runs. There is no sensor to stop
 * it so the driver needs to be careful.
 */
public class ExtendToteEjectorCommand extends Command {

    private LinearRamper ramper = new LinearRamper(1.2, LinearRamper.Type.UP);

    public ExtendToteEjectorCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.toteLifterSubsystem);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    /**
     * Opens the tote gate.
     */
    @Override
    protected void initialize() {
        ramper.reset();
        Robot.toteLifterSubsystem.setGateState(GateState.OPEN);
    }

    /**
     * Extends the tote ejector.
     */
    @Override
    protected void execute() {
        Robot.toteLifterSubsystem.setEjectorState(EjectorState.EXTENDING, ramper.process(1.0));
    }

    /**
     * Originally was going to automatically stop the tote ejector based on
     * current, but this did not work.
     * 
     * @return false
     */
    @Override
    protected boolean isFinished() {
        return timeSinceInitialized() > 0.5 && Robot.toteLifterSubsystem.isEjectorExtended();
    }

    /**
     * Stops the tote ejector.
     */
    @Override
    protected void end() {
        Robot.toteLifterSubsystem.setEjectorState(EjectorState.STOPPED, 0.0);
    }

    /**
     * Stops the tote ejector.
     */
    @Override
    protected void interrupted() {
        end();
    }
}
