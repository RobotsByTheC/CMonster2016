/* 
 * Copyright (c) 2015 RobotsByTheC. All rights reserved.
 *
 * Open Source Software - may be modified and shared by FRC teams. The code must
 * be accompanied by the BSD license file in the root directory of the project.
 */
package org.usfirst.frc.team2084.CMonster2015.subsystems;

import org.usfirst.frc.team2084.CMonster2015.AnalogGyro;
import org.usfirst.frc.team2084.CMonster2015.RobotMap;
import org.usfirst.frc.team2084.CMonster2015.commands.NormalDriveCommandGroup;
import org.usfirst.frc.team2084.CMonster2015.drive.ArcadeDriveAlgorithm;
import org.usfirst.frc.team2084.CMonster2015.drive.EncoderGyroMecanumDriveAlgorithm;
import org.usfirst.frc.team2084.CMonster2015.drive.EncoderWheelController;
import org.usfirst.frc.team2084.CMonster2015.drive.FourWheelDriveController;

import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.interfaces.Accelerometer;

/**
 * The subsystem that contains all the drive related components and sensors.
 * 
 * @author Ben Wolsieffer
 */
public class DriveSubsystem extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController frontLeftJaguar = RobotMap.driveSubsystemFrontLeftJaguar;
    Encoder frontLeftEncoder = RobotMap.driveSubsystemFrontLeftEncoder;
    SpeedController frontRightJaguar = RobotMap.driveSubsystemFrontRightJaguar;
    Encoder frontRightEncoder = RobotMap.driveSubsystemFrontRightEncoder;
    SpeedController rearLeftJaguar = RobotMap.driveSubsystemRearLeftJaguar;
    Encoder rearLeftEncoder = RobotMap.driveSubsystemRearLeftEncoder;
    SpeedController rearRightJaguar = RobotMap.driveSubsystemRearRightJaguar;
    Encoder rearRightEncoder = RobotMap.driveSubsystemRearRightEncoder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final AnalogGyro gyro = RobotMap.driveSubsystemGyro;
    private final Accelerometer accelerometer = RobotMap.driveSubsystemAccelerometer;
    private final EncoderWheelController<SpeedController> frontLeftWheel = RobotMap.driveSubsystemFrontLeftWheel;
    private final EncoderWheelController<SpeedController> frontRightWheel = RobotMap.driveSubsystemFrontRightWheel;
    private final EncoderWheelController<SpeedController> rearLeftWheel = RobotMap.driveSubsystemRearLeftWheel;
    private final EncoderWheelController<SpeedController> rearRightWheel = RobotMap.driveSubsystemRearRightWheel;
    private final FourWheelDriveController<EncoderWheelController<SpeedController>> driveController = RobotMap.driveSubsystemDriveController;
    private final EncoderGyroMecanumDriveAlgorithm<EncoderWheelController<SpeedController>> mecanumDriveAlgorithm = RobotMap.driveSubsystemMecanumDriveAlgorithm;
    private final ArcadeDriveAlgorithm arcadeDriveAlgorithm = RobotMap.driveSubsystemArcadeDriveAlgorithm;

    public DriveSubsystem() {
        // Invert the right wheels
        frontRightWheel.setInverted(true);
        rearRightWheel.setInverted(true);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new NormalDriveCommandGroup());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    }

    /**
     * Sets whether the gyro is enabled for driving.
     * 
     * @param enabled whether the gyro should be enabled
     */
    public void setGyroEnabled(boolean enabled) {
        mecanumDriveAlgorithm.setGyroEnabled(enabled);
    }

    /**
     * Sets whether the encoders are enabled for driving during teleop.
     * 
     * @param enabled whether the encoders should be enabled
     */
    public void setEncodersEnabled(boolean enabled) {
        frontLeftWheel.setEncoderEnabled(enabled);
        frontRightWheel.setEncoderEnabled(enabled);
        rearLeftWheel.setEncoderEnabled(enabled);
        rearRightWheel.setEncoderEnabled(enabled);
    }
}
