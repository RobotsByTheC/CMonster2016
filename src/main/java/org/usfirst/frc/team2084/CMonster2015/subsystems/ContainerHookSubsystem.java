/* 
 * Copyright (c) 2015 RobotsByTheC. All rights reserved.
 *
 * Open Source Software - may be modified and shared by FRC teams. The code must
 * be accompanied by the BSD license file in the root directory of the project.
 */
package org.usfirst.frc.team2084.CMonster2015.subsystems;

import org.usfirst.frc.team2084.CMonster2015.RobotMap;

import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.MotorSafety;
import edu.wpi.first.wpilibj.MotorSafetyHelper;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.command.Subsystem;

/**
 * Subsystem for the recycling container hook arm.
 * 
 * @author Ben Wolsieffer
 */
public class ContainerHookSubsystem extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    DigitalInput upperLimitSwitch = RobotMap.containerHookSubsystemUpperLimitSwitch;
    SpeedController talon = RobotMap.containerHookSubsystemTalon;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * The watchdog used to prevent runaway motors if the code screws up.
     */
    private final MotorSafetyHelper watchdog = new MotorSafetyHelper((MotorSafety) talon);

    /**
     * Represents the state of the container hook arm.
     */
    public enum State {
        /**
         * State when the arm is being raised.
         */
        RAISING(0.7),
        /**
         * State when the arm is stopped.
         */
        STOPPED(0.0),
        /**
         * State when the arm is being lowered.
         */
        LOWERING(-0.5);

        /**
         * The speed to move at in this particular state.
         */
        private double speed;

        private State(double speed) {
            this.speed = speed;
        }
    }

    /**
     * The current state of the arm.
     */
    private State state = State.STOPPED;

    /**
     * Sets the state of the arm to the specified value.
     * 
     * @param state the state to set
     */
    public void setState(State state) {
        this.state = state;

        watchdog.setSafetyEnabled(state != State.STOPPED);
        talon.set(state.speed);
    }

    /**
     * Gets the state of the arm.
     * 
     * @return the state
     */
    public State getState() {
        return state;
    }

    /**
     * Gets the value of the limit switch at the top of the arm's range.
     * 
     * @return true if the arm is raised
     */
    public boolean isRaised() {
        return upperLimitSwitch.get();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    }
}
