/* 
 * Copyright (c) 2015 RobotsByTheC. All rights reserved.
 *
 * Open Source Software - may be modified and shared by FRC teams. The code must
 * be accompanied by the BSD license file in the root directory of the project.
 */
package org.usfirst.frc.team2084.CMonster2015.commands;

import org.usfirst.frc.team2084.CMonster2015.Robot;
import org.usfirst.frc.team2084.CMonster2015.subsystems.ToteLifterSubsystem.LifterState;

import edu.wpi.first.wpilibj.command.Command;

/**
 * Lowers the tote lifter by recycling the air from the raise. This is a two
 * step process, which starts with directing the pressurized air from the
 * cylinders into a storage tank with the same volume as the cylinders. This
 * lowers the pressure from 60 to 30 psi and equalizes the pressure in the top
 * and bottom of the cylinders. Then the air in the bottom of the cylinder is
 * vented, allowing the cylinder to lower without using any air from the
 * compressor.
 * 
 * @author Ben Wolsieffer
 */
public class LowerToteLifterCommand extends Command {

    public static final double STORE_TIME = 0.5;

    public LowerToteLifterCommand() {
        super(2);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.toteLifterSubsystem);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    @Override
    protected void initialize() {
        // Start storing the air from the raise into the tank.
        Robot.toteLifterSubsystem.setLifterState(LifterState.STORE);
    }

    @Override
    protected void execute() {
        // After the store time has elapsed, lower the cylinder.
        if (timeSinceInitialized() > STORE_TIME) {
            Robot.toteLifterSubsystem.setLifterState(LifterState.LOWER);
        }
    }

    /**
     * Stops the command after a certain amount of time.
     * 
     * @return true when the command times out
     */
    @Override
    protected boolean isFinished() {
        return isTimedOut();
    }

    @Override
    protected void interrupted() {
    }

    @Override
    protected void end() {
    }

}
