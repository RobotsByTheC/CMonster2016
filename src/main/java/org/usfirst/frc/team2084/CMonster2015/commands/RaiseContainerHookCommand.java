/* 
 * Copyright (c) 2015 RobotsByTheC. All rights reserved.
 *
 * Open Source Software - may be modified and shared by FRC teams. The code must
 * be accompanied by the BSD license file in the root directory of the project.
 */
package org.usfirst.frc.team2084.CMonster2015.commands;

import org.usfirst.frc.team2084.CMonster2015.Robot;
import org.usfirst.frc.team2084.CMonster2015.subsystems.ContainerHookSubsystem.State;

import edu.wpi.first.wpilibj.command.Command;

/**
 * Raises the container hook until it hits the limit switch or for a certain
 * amount of time.
 * 
 * @author Ben Wolsieffer
 */
public class RaiseContainerHookCommand extends Command {

    /**
     * Raises the container hook for the specified amount of time or until the
     * limit switch is pressed.
     * 
     * @param time the amount of time to raise the container hook
     */
    public RaiseContainerHookCommand(double time) {
        this();
        setTimeout(time);
    }

    /**
     * Raises the container hook until the limit switch is pressed.
     */
    public RaiseContainerHookCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.containerHookSubsystem);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    @Override
    protected void initialize() {
    }

    /**
     * Continuously tells the container hook to move to keep the watchdog happy.
     */
    @Override
    protected void execute() {
        Robot.containerHookSubsystem.setState(State.RAISING);
    }

    /**
     * Finishes when the limit switch is hit or the specified time passes.
     * 
     * @return true when the hook is raised or the command times out
     */
    @Override
    protected boolean isFinished() {
        return Robot.containerHookSubsystem.isRaised() || isTimedOut();
    }

    /**
     * Stops the container hook.
     */
    @Override
    protected void end() {
        Robot.containerHookSubsystem.setState(State.STOPPED);
    }

    /**
     * Stops the container hook.
     */
    @Override
    protected void interrupted() {
        end();
    }
}
